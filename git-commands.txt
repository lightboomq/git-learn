Термины:
    Repository (репозиторий) - Это хранилище где содержатся данные.

    cmd (command) - Командная строка в windows. Терминал в vsCode = cmd windows
    
    Пример формирования структуры гит объектов:
                       |- commit (sha1 хеш)
                       |- tree (корень проекта)
                      / \                                                      
                     /   \
                    /     \
    tree(подпапка)-|       |-tree(подпапка)
                  / \     / \ 
                 /   \   /   \
                /     \ /     \
          blob-| blob-| |-blob |-blob

 
    commit: при создания новой версий проекта , формируется иерархия объектов гит, 
        где каждому созданому коммиту присваеивается SHA1 хеш и коммит сылается на корневую папку проекта. Так же при созданий нового коммита, последний коммит будет родителем нового коммита,
        таким образом новый коммит наследует историю изменений, установленную предыдущим коммитом. 
        Такое поведение позволяет легко перемещаться по истории и управлять версиями вашего проекта. 
    tree (дерево): Представляет собой папку(tree), содержащую ссылки на другие объекты, такие как файлы(blob) и подпапки(tree). 
        Штрих-кода объекта дерева отображает структуру и содержимое каталога.
    blob: Это сам файл, который содержит неструктурированные данные (текст или бинарные данные). 
        Blob представляет содержимое файлов, и у каждого блоба есть свой уникальный SHA-1 хеш.
    
    git init (инициализация) -  это команда, которая используется для создания нового репозитория Git. 
        После инициализаций проекта в папке проекта создается скрытая папка git она и является репозиторием на локальном компьютере.

    On branch main: Указатель HEAD находится в ветке main.

    nothing to commit, working tree clean: Каких либо изменений в проекте нет, коммит не требуется.

    Untraked file: означает что гит сейчас не отслеживает файл , гит еще не создал blob в папке .git для этих файлов. Для отслеживание файла используется команда git add . 

    Changes to be committed: файл добавлен в индекс (staging area) и подготовлен для commita.

    Changes not staged for commit: означает, что в вашем рабочем каталоге есть изменения в файлах, которые не были добавлены в индекс (staging area) и 
    и следовательно, не готовы для подтверждения (commit). 
    
    modified: если подсвеченно красным то изменения еще не были добавлены в индекс (staging area) если зеленым то добавлены и готов для коммита

    insertions(+): добавлено n к-во строк в файл.
    deletion(-): удаленно n к-во строк в файле.

    Состояние указателя detached HEAD:
        говорит о том что указатель HEAD переместился не на ветку а на определеный коммит
        и на самом деле крайне не рекомендуется находится в таком состояний когда HEAD сылается на конкретный коммит, 
        а не на ветку HEAD , потому что работа должна происходить в рамках ветки и создавать коммиты в ветках, поэтому
        можно посмотреть состояние версий и вернуться обратно в ветку. Так же если ввести git log и указатель HEAD будет перемещен на ранний определеный коммит, то все более поздние коммиты 
        видны не будут, но на самом деле все те коммиты которые создавались позднее они все еще находятся в гит репозитории.  
-----------------------------------------------------------------------------------------------------------------------------------------

Основные команды терминала:
    1.git init: инициализация проекта и создание репозитория (команда используется 1 раз)

    2.git add: значит "добавить изменения". Когда вы редактируете файлы в своем проекте, эти изменения не сохраняются сразу. 
            С помощью git add вы выбираете, какие изменения хотите сохранить перед созданием нового сохранения (коммита). 
        git add . : Добавляет изменение в промежуточную зону. 
        git reset . : убрать все файлы из index (stage area), все изменения в файле останутся прежними.
        git add index.html: Добавляет изменение в промежуточную зону  конкретный файл index.html, либо любой другой
    
    3.git commit -m "Комментарии": добавить комментарий , -m это message   
    4.git push: Отправляет изменения из вашей локальной репозиторий в удаленный репозиторий gitHub.com. 
      git pull: Загрузка и применения изменений с удаленной ветки в локальную. Если в текущий момент локально находимся в какой-либо ветке , 
        то введя эту команду, гит попыпается скачать все обновления из этой ветки, которая находится в удаленном репозиторий.
        

    5.git remote add origin https://github.com/lightboomq/learn-git.git: Подключение удаленного репозитория(команда используется 1 раз в текущем проекте).
        origin - Это имя удаленного репозитория на gitHub.com(может быть любое другое)
        Далее можно будет взаимодействовать с этим названием(загружать на гит с локального реп., либо скачивать обновление с удаленного реп.)
        Более того можно связывать локальный репозиторий с несколькоми удаленными репозиториями, но как правило удаленный репозиторий только один.
    6.git push -u origin <имя ветки>: Связывает удаленный репозиторий origin с локальной веткой main
        Таким образом, эта команда связывает локальную ветку <имя ветки> с удалённой веткой <имя ветки> на репозитории origin(если такая ветка уже существует на удалённом репозитории). 
        Если удалённая ветка не существует, команда создаст её.
        После выполнения этой команды можно использовать команды git push и git pull без указания имени удаленного репозитория и ветки.
-----------------------------------------------------------------------------------------------------------------------------------------

Вспомогательные команды терминала:
    clear - очистить терминал

    cd (change directory) - войти в папку.
    cd .. - выйти из папки.
    cd ../../ - выйти на 2 уровня выше и т.д

    ls: Команда для отображения файлов и папок в той папке в которой находимся.   
    
    git cat file-name.txt: Команда читает содержимое файла (в бинанарном виде).
    git cat-file -t хеш: Команда для получения информации о содержимом объектов в репозитории Git. Флаг -t позволяет узнать тип объекта хеша, commit, tree или blob.
    git cat-file -p хеш: Команда позволяет увидеть содержимое объекта.
    
    git confing --list - просмотр настроек гит

    Два варианта отката кода:
            1. Отмена последних локальных изменений:
                git reset .
                git checkout -- .  откатывает код в редакторе до последнего сделанного коммита во всех файлах.
            2. Отмена последних локальных изменений:
                git reset --soft HEAD^1 - удаление только последнего коммита 
                git reset --hard HEAD^1 - удаление последнего коммита и все данные связаные с ним изменения в коде

    git log: Показывает историю коммитов с хешом и указателем HEAD на текущий коммит. 
    git status: Позволяет узнать текущее состояние вашего репозитория.
    git checkout номер хеша: Переход на коммит по хеш номеру, можно первые 4-5 цифр указывать.
        
   
-----------------------------------------------------------------------------------------------------------------------------------------

    Работа с ветками:
        Если ветка была создана на текущей ветке, то эти ветки будут сылаться на последний коммит текущей ветки.
        Если ветка была создана на коммите, то произойдет ответленние ветки , коммит будет являться родителем этой созданой ветки
            и все коммиты которые находятся по иерархий выше их будет не видно.

        git branch: Показывает все созданые ветки. * указывает на текущю ветку.
        git branch -d <имя ветки>: Удаляет ветку. Для того что бы удалить текущую ветку указатель HEAD должен стоять на другой ветке.
        git branch -M <имя ветки> - Переименовывает ветку на котором стоит указатель HEAD.

        git checkout <имя ветки>: Переход в ветку.
        git checkout -b <имя ветки>: Создание ветки и переход в нее.

        Слияние веток: 
            git merge -m 'Комментарий' <имя ответленной ветки>:(команда merge commit -m вводится в текущую ветку , которая будет в себя принимать изминения из ответленной ветки).
                Гит создаст родительский коммит для этих двух веток и указатель HEAD автоматически передвинется на этот merge commit,
                произойдет слияние веток. После слияния веток , ответвленную ветку можно будет удалить т.к в ней не будет необходимости.
                
                 
-----------------------------------------------------------------------------------------------------------------------------------------

Команды работы с удаленным репозиторий:
    
    git config --global user.name "lightboomq"
    git config --global user.email "pikalov.ea97@gmail.com"
        Команды git config --global user.name и git config --global user.email настраивают ваше имя и электронную почту в Git. 
            Это важно, потому что Git будет использовать эту информацию, чтобы знать, кто сделал изменения в проектах. 

    git clone <url>: Клонирует публичный удаленный репозиторий к себе в локальный репозиторий. Если приватный репозиторий, то нужны права доступа для клонирования(логин,пароль).
    origin: Имя удаленного репозитория по умолчанию .Когда выполняется команда git clone, 
        то Git автоматически создает "origin" и связывает ваш локальный репозиторий с удаленным.

    git branch -a: Отображает все ветки, включая те, которые находятся в удаленных репозиториях.
    git checkout <имя ветки>: Переход в любую ветку будет доступен, после того как будет настроена связь между локальным и удаленным репозиторием.

    git remote -v: Команда показывает установлена ли связь с удаленным репозиторием.
-----------------------------------------------------------------------------------------------------------------------------------------

Расширение Git Graph: Git Graph — это расширение для Visual Studio Code, которое предоставляет пользователям графический интерфейс для работы с репозиториями Git.   Оно позволяет визуализировать историю коммитов, ветки и их слияния в удобном и понятном формате.
    
    Основные функции Git Graph:

        1. Визуализация: Отображает структуру коммитов и веток в виде графа, что помогает лучше понять историю проекта.
        2. Коммиты: Позволяет выполнять коммиты непосредственно из интерфейса, а также видеть их детали.
        3. Ветки: Упрощает создание, удаление и переключение между ветками, а также слияние веток.
        4. Пулл-запросы: Можно просматривать открытые и закрытые пулл-запросы (если интегрировано с GitHub или другими сервисами).
        5. Фильтрация: Есть возможность фильтровать коммиты по временным диапазонам или авторам.

    Git Graph удобен для пользователей, которые предпочитают визуальный подход к управлению версиями.

-----------------------------------------------------------------------------------------------------------------------------------------

03:35